/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/11.0.6
 * Generated at: 2025-06-13 03:04:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.zumba.model.Batch;

public final class addBatch_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("com.zumba.model.Batch");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');

  Batch batch = (Batch) request.getAttribute("batch");
  boolean editing = (batch != null);

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("  <meta charset=\"UTF-8\"/>\n");
      out.write("  <title>");
      out.print( editing ? "Edit" : "Add New" );
      out.write(" Batch</title>\n");
      out.write("  <style>\n");
      out.write("    /* Base reset & font */\n");
      out.write("    * {\n");
      out.write("      box-sizing: border-box;\n");
      out.write("      margin: 0;\n");
      out.write("      padding: 0;\n");
      out.write("    }\n");
      out.write("    body {\n");
      out.write("      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n");
      out.write("      background: #f9fafb;\n");
      out.write("      color: #333;\n");
      out.write("      line-height: 1.6;\n");
      out.write("      padding: 2rem;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Centered form container */\n");
      out.write("    .form-container {\n");
      out.write("      max-width: 480px;\n");
      out.write("      margin: 0 auto;\n");
      out.write("      background: #fff;\n");
      out.write("      padding: 2rem;\n");
      out.write("      border-radius: 8px;\n");
      out.write("      box-shadow: 0 4px 12px rgba(0,0,0,0.05);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    h3 {\n");
      out.write("      text-align: center;\n");
      out.write("      margin-bottom: 1.5rem;\n");
      out.write("      color: #222;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    form label {\n");
      out.write("      display: block;\n");
      out.write("      margin-bottom: 0.5rem;\n");
      out.write("      font-weight: 600;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    form input[type=\"text\"], form textarea {\n");
      out.write("      width: 100%;\n");
      out.write("      padding: 0.5rem 0.75rem;\n");
      out.write("      margin-bottom: 1.25rem;\n");
      out.write("      border: 1px solid #ccc;\n");
      out.write("      border-radius: 4px;\n");
      out.write("      font-size: 1rem;\n");
      out.write("      transition: border-color 0.2s;\n");
      out.write("    }\n");
      out.write("    form input[type=\"text\"]:focus, form textarea:focus {\n");
      out.write("      outline: none;\n");
      out.write("      border-color: #007BFF;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    form textarea {\n");
      out.write("      min-height: 100px;\n");
      out.write("      resize: vertical;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    button[type=\"submit\"] {\n");
      out.write("      width: 100%;\n");
      out.write("      padding: 0.75rem;\n");
      out.write("      background: #007BFF;\n");
      out.write("      border: none;\n");
      out.write("      border-radius: 4px;\n");
      out.write("      color: #fff;\n");
      out.write("      font-size: 1rem;\n");
      out.write("      font-weight: 600;\n");
      out.write("      cursor: pointer;\n");
      out.write("      transition: background 0.2s;\n");
      out.write("    }\n");
      out.write("    button[type=\"submit\"]:hover {\n");
      out.write("      background: #0056b3;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .back-link {\n");
      out.write("      display: block;\n");
      out.write("      text-align: center;\n");
      out.write("      margin-top: 1.5rem;\n");
      out.write("      font-size: 0.95rem;\n");
      out.write("    }\n");
      out.write("    .back-link a {\n");
      out.write("      color: #555;\n");
      out.write("      text-decoration: none;\n");
      out.write("      transition: color 0.2s;\n");
      out.write("    }\n");
      out.write("    .back-link a:hover {\n");
      out.write("      color: #007BFF;\n");
      out.write("    }\n");
      out.write("  </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("  <div class=\"form-container\">\n");
      out.write("    <h3>");
      out.print( editing ? "Edit" : "Add New" );
      out.write(" Class Time</h3>\n");
      out.write("    <form action=\"batch\" method=\"post\">\n");
      out.write("      <input type=\"hidden\" name=\"action\" value=\"");
      out.print( editing ? "update" : "insert" );
      out.write("\"/>\n");
      out.write("      ");
 if (editing) { 
      out.write("\n");
      out.write("        <input type=\"hidden\" name=\"id\" value=\"");
      out.print( batch.getId() );
      out.write("\"/>\n");
      out.write("      ");
 } 
      out.write("\n");
      out.write("\n");
      out.write("      <label for=\"time\">Class Time</label>\n");
      out.write("      <input\n");
      out.write("        id=\"time\" type=\"text\" name=\"time\" required\n");
      out.write("        value=\"");
      out.print( editing ? batch.getTime() : "" );
      out.write("\"/>\n");
      out.write("\n");
      out.write("      <button type=\"submit\">\n");
      out.write("        ");
      out.print( editing ? "Update Class Time" : "Add Class Time" );
      out.write("\n");
      out.write("      </button>\n");
      out.write("    </form>\n");
      out.write("    <p class=\"back-link\">\n");
      out.write("      <a href=\"batch\">‚Üê Back to Class Times</a>\n");
      out.write("    </p>\n");
      out.write("  </div>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
